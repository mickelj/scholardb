/**
 * @module input/bibjson
 */

import parseDate from '../../date'
import parseName from '../../name'

function nameProps (person) {
  let {
    firstname,
    lastname,
    firstName: given = firstname,
    lastName: family = lastname
  } = person

  if (given && family) {
    return {given, family}
  } else if (person.name) {
    return parseName(person.name)
  }
}

function quickscrapeSpecificProps () {
  return { type: 'article-journal' }
}

let commonProps = [
  'type',
  'publisher',
  'title'
]

let identifiers = [
  'PMID',
  'PMCID',
  'DOI',
  'ISBN',
  'URL'
]

function generalProps (input) {
  let output = {}

  for (let prop in input) {
    let upperCaseProp = prop.toUpperCase()

    if (commonProps.includes(prop)) {
      output[prop] = input[prop]
    } else if (identifiers.includes(upperCaseProp) || links.includes(upperCaseProp)) {
      output[upperCaseProp] = input[prop]
    }
  }

  if (input.author) { output.author = input.author.map(nameProps) }
  if (input.editor) { output.editor = input.editor.map(nameProps) }
  if (input.reviewer) {
    if (input.author) { output['reviewed-author'] = output.author }
    output.author = input.reviewer.map(nameProps)
  }

  if (Array.isArray(input.keywords)) {
    output.keyword = input.keywords.join()
  } else if (input.keywords) {
    output.keyword = input.keywords
  }

  if (input.date && Object.keys(input.date).length > 0) {
    let dates = input.date
    if (dates.submitted) { output.submitted = parseDate(dates.submitted) }
    if (dates.published) { output.issued = parseDate(dates.published) }
  } else if (input.year) {
    output.issued = {'date-parts': [[input.year]]}
  }
  if (input.journal) {
    let journal = input.journal
    if (journal.name) { output['container-title'] = journal.name }
    if (journal.issn) { output.ISSN = journal.issn }
    if (journal.volume) { output.volume = journal.volume }
    if (journal.issue) { output.issue = journal.issue }

    if (journal.firstpage) { output['page-first'] = journal.firstpage }
  }

  if (input.link && typeof input.link[0] === 'object') {
    output.url = input.link[0].url
  }

  if (input.identifier) {
    for (let {id, type} in identifier) {
      type = type.toUpperCase()
      if (identifiers.includes(type)) {
        output[type] = id
      }
    }
  }

  return output
}

/**
 * Parse ContentMine quickscrape data
 *
 * @access protected
 * @param {Object} data - The input data
 * @return {Array<CSL>} The formatted input data
 */
const parseContentMine = function (data) {
  return Object.assign(generalProps(data), quickscrapeSpecificProps(data))
}

/**
 * Parse BibJSON data
 *
 * @access protected
 * @param {Object} data - The input data
 * @return {Array<CSL>} The formatted input data
 */
const parseBibJson = function (data) {
  return generalProps(data)
}

export {
  parseContentMine as quickscrapeRecord,
  parseBibJson as record
}
